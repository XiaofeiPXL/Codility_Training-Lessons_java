A non-empty array A consisting of N integers is given.

The leader of this array is the value that occurs in more than half of the elements of A.

An equi leader is an index S such that 0 ≤ S < N − 1 and two sequences A[0], A[1], ..., A[S] and A[S + 1], A[S + 2], ..., A[N − 1] have leaders of the same value.

For example, given array A such that:

    A[0] = 4
    A[1] = 3
    A[2] = 4
    A[3] = 4
    A[4] = 4
    A[5] = 2
we can find two equi leaders:

0, because sequences: (4) and (3, 4, 4, 4, 2) have the same leader, whose value is 4.
2, because sequences: (4, 3, 4) and (4, 4, 2) have the same leader, whose value is 4.
The goal is to count the number of equi leaders.

Write a function:

class Solution { public int solution(int[] A); }

that, given a non-empty array A consisting of N integers, returns the number of equi leaders.

For example, given:

    A[0] = 4
    A[1] = 3
    A[2] = 4
    A[3] = 4
    A[4] = 4
    A[5] = 2
the function should return 2, as explained above.

Write an efficient algorithm for the following assumptions:

N is an integer within the range [1..100,000];
each element of array A is an integer within the range [−1,000,000,000..1,000,000,000].

import java.util.HashMap;
import java.util.Map;

class Solution {
    public int solution(int[] A) {
        
        if(A.length==0){
            return 0;
        }
        
        Map<Integer,Integer> map = new HashMap<Integer,Integer>();
        for(int i=0;i<A.length;i++){
            if(!map.containsKey(A[i])){
                map.put(A[i],1);
            }else{
                int count = map.get(A[i]);
                map.put(A[i],count+1);
            }
        }
        
        int Max_count = 0;
        int Max_number = 0;
        
        for(int key : map.keySet()){
            int cur_count = map.get(key);
            if(cur_count>Max_count){
                Max_count = cur_count;
                Max_number = key;
            }
        }
        
        int leader_count = 0;
        int leader_number = 0;
        if(Max_count>(0.5)*(A.length)){
            leader_count = Max_count;
            leader_number = Max_number;
        }else{
            return 0;
        }
        
        int num_leader = 0;
        int num_leader_left = 0;
        for(int i=0;i<A.length;i++){
            if(A[i]==leader_number){
                num_leader_left++;
            }
            if(num_leader_left>(0.5)*(i+1)){
               int num_leader_right = leader_count - num_leader_left;
               if(num_leader_right>(0.5)*(A.length-i-1)){
                   num_leader++;
               }
            }
        }
        
        return num_leader;
    }
}